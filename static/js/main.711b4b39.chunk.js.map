{"version":3,"sources":["components/card/card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","issues","map","issue","key","title","style","marginBottom","src","alt","user","login","body","color","textDecoration","href","html_url","App","state","bgblack","username","reponame","changeBackground","setState","handleUserName","event","target","value","handleRepoName","onSubmit","a","async","fetch","response","status","json","data","console","log","alert","bgcolor","this","backgroundColor","display","justifyContent","type","onClick","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRA6BeA,G,MA3BF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,OACXD,EAAOA,EAAME,OAAOC,KAAI,SAACC,GACzB,OACE,yBAAKC,IAAKD,EAAME,MAAOL,UAAU,WAAWM,MAAO,CAAEC,aAAa,SAChE,yBAAKP,UAAU,aACb,yBAAKA,UAAU,mBACf,yBACEA,UAAU,gBACVQ,IAAI,+EACJC,IAAKN,EAAME,QACb,yBAAKL,UAAU,qBACX,4BAAKG,EAAME,OACX,0BAAML,UAAU,cAAhB,cAAyCG,EAAMO,KAAKC,SAGpD,uBAAGX,UAAU,aAAaG,EAAMS,MAClC,4BAAQZ,UAAU,gBAClB,uBAAGM,MAAO,CAAEO,MAAO,UAAUC,eAAe,QAAQC,KAAMZ,EAAMa,UAAhE,6BAKN,wCCmCSC,G,iNAvDbC,MAAQ,CACPjB,OAAO,GACPkB,SAAQ,EACRC,SAAS,GACTC,SAAS,I,EAGVC,iBAAmB,WACf,EAAKC,SAAS,CAACJ,SAAS,EAAKD,MAAMC,W,EAGvCK,eAAiB,SAACC,GACd,EAAKF,SAAS,CAACH,SAASK,EAAMC,OAAOC,S,EAGzCC,eAAiB,SAACH,GACd,EAAKF,SAAS,CAACF,SAASI,EAAMC,OAAOC,S,EAGzCE,SAAW,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACgBE,MAAM,gCAAD,OAAiC,EAAKd,MAAME,SAA5C,YAAwD,EAAKF,MAAMG,SAAnE,aADrB,UAEc,OADfY,EADC,QAEKC,OAFL,mCAAAJ,EAAA,MAIcG,EAASE,QAJvB,OAICC,EAJD,OAKHC,QAAQC,IAAIF,GACZ,EAAKb,SAAS,CAACtB,OAAOmC,IANnB,wBASHG,MAAM,2CATH,uC,wEAaP,IAAMC,EAAQC,KAAKvB,MAAMC,QAAQ,QAAQ,aAC7C,OACE,yBAAKnB,UAAU,MAAMM,MAAO,CAACoC,gBAAgBF,IACzC,2BAAOlC,MAAO,CAACqC,QAAQ,OAAOC,eAAe,YAAY5C,UAAU,UACjE,2BAAO6C,KAAK,WAAWC,QAASL,KAAKnB,mBACrC,0BAAMtB,UAAU,kBAEtB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,QACb,wBAAIM,MAAO,CAACO,MAAM,YAAlB,cAAyC,6BACzC,0BAAMb,UAAU,eAAhB,yEAEA,2BAAOA,UAAU,aAAa6C,KAAK,OAAOE,YAAY,wBAAwBC,SAAUP,KAAKjB,iBAC7F,2BAAOxB,UAAU,aAAa6C,KAAK,OAAOE,YAAY,wBAAwBC,SAAUP,KAAKb,iBAC7F,4BAAQ5B,UAAU,aAAaM,MAAO,CAACoC,gBAAgB,UAAU7B,MAAM,SAAUiC,QAASL,KAAKZ,UAA/F,UACA,kBAAC,EAAD,CAAM5B,OAAQwC,KAAKvB,MAAMjB,gB,GAhDjBgD,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.711b4b39.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css'\nconst Card = props => (\n  <div className=\"row\">\n    { props?(props.issues.map((issue) => {\n      return (\n        <div key={issue.title} className=\"col-md-4\" style={{ marginBottom:\"2rem\" }}>\n          <div className=\"card__box\">\n            <div className=\"card-header row\">\n            <img \n              className=\"card__box-img\" \n              src=\"https://github.githubassets.com/images/modules/open_graph/github-octocat.png\" \n              alt={issue.title}/>\n            <div className=\"card-header-title\">  \n                <h4>{issue.title}</h4>\n                <span className=\"card-price\">Created By {issue.user.login}</span>  \n            </div>\n            </div>  \n                <p className=\"card-desc\">{issue.body}</p>\n              <button className=\"button-excel\">\n              <a style={{ color: \"inherit\",textDecoration:\"none\"}}href={issue.html_url}>Take me to the repo</a>\n              </button>\n          </div>\n        </div>\n      );\n    })):<h1>ERROR</h1>}\n    </div>\n);\n\nexport default Card;","import React,{Component} from 'react';\nimport Card from './components/card/card';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n     issues:[],\n     bgblack:false,\n     username:'',\n     reponame:''\n    }\n    \n    changeBackground = () => {\n        this.setState({bgblack:!this.state.bgblack})\n    }\n\n    handleUserName = (event) => {\n        this.setState({username:event.target.value})\n    }\n\n    handleRepoName = (event) => {\n        this.setState({reponame:event.target.value})\n    }\n\n    onSubmit = async () => {\n        const response = await fetch(`https://api.github.com/repos/${this.state.username}/${this.state.reponame}/issues`)\n        if(response.status===200){\n           \n            let data = await response.json()\n            console.log(data)\n            this.setState({issues:data})\n        }\n        else{\n            alert(\"FAILED TO FETCH ISSUES,PLEASE TRY AGAIN\")\n        }\n    }\n    render(){\n        const bgcolor=this.state.bgblack?\"black\":\"whitesmoke\"\n    return (\n      <div className=\"App\" style={{backgroundColor:bgcolor}}>\n          <label style={{display:\"flex\",justifyContent:\"flex-end\"}}className=\"switch\">\n            <input type=\"checkbox\" onClick={this.changeBackground}/>\n            <span className=\"slider round\"></span>\n          </label>\n      <div className=\"row\">\n        <div className=\"main\">\n          <h2 style={{color:\"#04d6cb\"}}>GRAB ISSUES<hr/>\n          <span className=\"header-desc\">A centralized place to list github issues from any github repository</span></h2>\n          \n          <input className=\"search_box\" type=\"text\" placeholder=\"Enter Github username\" onChange={this.handleUserName}/>\n          <input className=\"search_box\" type=\"text\" placeholder=\"Enter Repository name\" onChange={this.handleRepoName}/>\n          <button className=\"search_box\" style={{backgroundColor:\"#04d6cb\",color:\"white\"}} onClick={this.onSubmit}>Search</button>\n          <Card issues={this.state.issues} />\n        </div>\n      </div>\n      </div>\n    );\n  }\n  }\n  \n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}